{
  "Comment": "A description of my state machine",
  "StartAt": "Save Vars",
  "States": {
    "Save Vars": {
      "Type": "Pass",
      "Next": "Validate Draft Data",
      "Assign": {
        "draftDetail": "{% $states.input %}",
        "draftLibrariesList": "{% $states.input.libraries %}",
        "draftPayload": "{% (\n  $states.input.payload ? \n  $states.input.payload : {\n    \"version\": \"${__default_payload_version__}\"\n  }\n) %}",
        "draftData": "{% $states.input.payload.data ? $states.input.payload.data : {} %}",
        "draftEngineParameters": "{% $states.input.payload.data.engineParameters ? $states.input.payload.data.engineParameters : {} %}",
        "draftTags": "{% $states.input.payload.data.tags ? $states.input.payload.data.tags : {} %}",
        "draftInputs": "{% $states.input.payload.data.inputs ? $states.input.payload.data.inputs : {} %}"
      }
    },
    "Validate Draft Data": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__validate_draft_payload_lambda_function_arn__}",
        "Payload": "{% $draftData %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Is Valid Data",
      "Output": {
        "isValid": "{% $states.result.Payload.isValid %}"
      }
    },
    "Is Valid Data": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "No need to rerun",
          "Condition": "{% $states.input.isValid %}",
          "Comment": "No need to populate"
        }
      ],
      "Default": "Do we have matching libraries"
    },
    "Do we have matching libraries": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Get Engine parameters",
          "Condition": "{%\n/* Compare the draft tags to the libraries */\n/* Get the draft tags */\n(\n    [ \n        $draftTags.(libraryId)\n    ]\n)\n=\n/* Get the draft detail libraries */ \n(\n    [\n        $draftLibrariesList.(libraryId)\n    ]\n) %}"
        }
      ],
      "Default": "Get Primitive Tags from libraries"
    },
    "Get Primitive Tags from libraries": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${__get_libraries_lambda_function_arn__}",
        "Payload": {
          "libraries": "{% $draftLibrariesList %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Assign": {
        "draftTags": "{% $merge(\n  [\n    $states.result.Payload,\n    $draftTags\n  ]\n) %}"
      },
      "Next": "Get Engine parameters"
    },
    "No need to rerun": {
      "Type": "Pass",
      "End": true
    },
    "Get Engine parameters": {
      "Type": "Parallel",
      "Next": "Get tags",
      "Branches": [
        {
          "StartAt": "Has Project ID",
          "States": {
            "Has Project ID": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided project id",
                  "Condition": "{% $draftEngineParameters.projectId ? true : false %}",
                  "Comment": "Project ID Provided"
                }
              ],
              "Default": "Get Default Project Id"
            },
            "Use provided project id": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "projectId": "{% $draftEngineParameters.projectId %}"
              }
            },
            "Get Default Project Id": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_project_id_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "projectId": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Pipeline ID",
          "States": {
            "Has Pipeline ID": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided pipeline id",
                  "Condition": "{% $draftEngineParameters.pipelineId ? true : false %}",
                  "Comment": "Pipeline ID Provided"
                }
              ],
              "Default": "Get default pipeline id"
            },
            "Use provided pipeline id": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "pipelineId": "{% $draftEngineParameters.pipelineId %}"
              }
            },
            "Get default pipeline id": {
              "Type": "Task",
              "Arguments": {
                "Name": "{% '${__workflow_id_to_pipeline_id_ssm_parameter_path_prefix__}/' & $draftDetail.workflow.version %}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "pipelineId": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Output URI",
          "States": {
            "Has Output URI": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided output uri",
                  "Condition": "{% $draftEngineParameters.outputUri ? true : false %}",
                  "Comment": "Output URI Provided"
                }
              ],
              "Default": "Get default output uri prefix"
            },
            "Use provided output uri": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "outputUri": "{% $draftEngineParameters.outputUri %}"
              }
            },
            "Get default output uri prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_output_uri_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "outputUri": "{% $states.result.Parameter.Value & $draftDetail.portalRunId & '/' %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Logs URI",
          "States": {
            "Has Logs URI": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided logs uri",
                  "Condition": "{% $draftEngineParameters.logsUri ? true : false %}",
                  "Comment": "Logs URI Provided"
                }
              ],
              "Default": "Get default logs uri prefix"
            },
            "Use provided logs uri": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "logsUri": "{% $draftEngineParameters.logsUri %}"
              }
            },
            "Get default logs uri prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_logs_uri_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "logsUri": "{% $states.result.Parameter.Value & $draftDetail.portalRunId & '/' %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Cache URI",
          "States": {
            "Has Cache URI": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided cache uri",
                  "Condition": "{% $draftEngineParameters.cacheUri ? true : false %}",
                  "Comment": "Cache URI Provided"
                }
              ],
              "Default": "Get default cache uri prefix"
            },
            "Use provided cache uri": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "cacheUri": "{% $draftEngineParameters.cacheUri %}"
              }
            },
            "Get default cache uri prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_cache_uri_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "cacheUri": "{% $states.result.Parameter.Value & $draftDetail.portalRunId & '/' %}"
              }
            }
          }
        }
      ],
      "Assign": {
        "engineParameters": "{% /* https://try.jsonata.org/6nUH8BUBr */\n$merge($states.result) %}"
      }
    },
    "Get tags": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Has fastqRgidList",
          "States": {
            "Has fastqRgidList": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Set fastq rgid list",
                  "Condition": "{% $draftTags.fastqRgidList ? true : false %}"
                }
              ],
              "Default": "Get fastq list rgids from normal libraries"
            },
            "Set fastq rgid list": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "fastqRgidList": "{% $draftTags.fastqRgidList %}"
              }
            },
            "Get fastq list rgids from normal libraries": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_fastq_list_rgids_from_library_lambda_function_arn__}",
                "Payload": {
                  "libraryId": "{% $draftTags.libraryId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "fastqRgidList": "{% $states.result.Payload.fastqRgidList %}"
              }
            }
          }
        },
        {
          "StartAt": "Get subject and individual id tags",
          "States": {
            "Get subject and individual id tags": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_metadata_tags_lambda_function_arn__}",
                "Payload": {
                  "libraryId": "{% $draftTags.libraryId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "subjectId": "{% $states.result.Payload.libraryObj.subject.subjectId %}",
                "individualId": "{% $states.result.Payload.libraryObj.subject.individualSet[0].individualId %}"
              }
            }
          }
        }
      ],
      "Next": "Get Inputs",
      "Assign": {
        "tags": "{% /* List to merge together */\n[\n    /* Start with the draft tags */\n    $draftTags,\n    /* Merge the results list together */\n    $merge($states.result)\n] \n/* Then merge these initial tags with states.result  */\n~> $merge\n/* Remove any keys with values */\n~> $sift(function($v, $k){$v != null}) %}"
      }
    },
    "Get Inputs": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get fastq ids from rgid list",
          "States": {
            "Get fastq ids from rgid list": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "fastqIdList": "{% $states.result.Payload.fastqIdList %}"
              },
              "Arguments": {
                "FunctionName": "${__get_fastq_id_list_from_fastq_rgid_list_lambda_function_arn__}",
                "Payload": {
                  "fastqRgidList": "{% $tags.fastqRgidList %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Wait for fastqs"
            },
            "Wait for fastqs": {
              "Type": "Task",
              "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
              "Arguments": {
                "Entries": [
                  {
                    "Detail": {
                      "taskToken": "{% $states.context.Task.Token %}",
                      "payload": {
                        "fastqIdList": "{% $states.input.fastqIdList %}",
                        "requirements": {
                          "hasQc": true,
                          "hasFingerprint": true,
                          "hasActiveReadSet": true
                        },
                        "forceUnarchiving": true
                      }
                    },
                    "DetailType": "${__fastq_sync_detail_type__}",
                    "EventBusName": "OrcaBusMain",
                    "Source": "orcabus.dragenwgtsdna"
                  }
                ]
              },
              "Output": {
                "fastqIdList": "{% $states.input.fastqIdList %}"
              },
              "Next": "Get fastq list rows from fastq list"
            },
            "Get fastq list rows from fastq list": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_fastq_list_rows_from_fastq_id_list_lambda_function_arn__}",
                "Payload": {
                  "fastqIdList": "{% $states.input.fastqIdList %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "fastqListRows": "{% $states.result.Payload.fastqListRows %}"
              }
            }
          }
        },
        {
          "StartAt": "Pass",
          "States": {
            "Pass": {
              "Type": "Pass",
              "Output": {},
              "End": true
            }
          }
        }
      ],
      "Next": "Add qc tags",
      "Assign": {
        "inputs": "{% /* https://try.jsonata.org/-D6C7WZKF */\n/* List to merge together */\n[\n    /* Start with the draft inputs */\n    $draftInputs,\n    /* Merge the results list together */\n    $merge($states.result),\n    /* Add in the sampleName from the library id variable */\n    {\n        \"sampleName\": $draftTags.libraryId\n    }\n]\n/* Then merge these initial inputs with states.result */\n~> $merge\n/* Remove any keys with values */\n~> $sift(function($v, $k){$v != null}) %}"
      }
    },
    "Add qc tags": {
      "Type": "Parallel",
      "Next": "Is new workflow manager deployed",
      "Branches": [
        {
          "StartAt": "Get coverage and dup-frac estimates",
          "States": {
            "Get coverage and dup-frac estimates": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_qc_summary_stats_from_rgid_list_lambda_function_arn__}",
                "Payload": {
                  "fastqRgidList": "{% $tags.fastqRgidList %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "preLaunchCoverageEst": "{% $states.result.Payload.coverageSum %}",
                "preLaunchDupFracEst": "{% $states.result.Payload.dupFracAvg %}",
                "preLaunchInsertSizeEst": "{% $states.result.Payload.insertSizeAvg %}"
              }
            }
          }
        },
        {
          "StartAt": "check ntsm passing",
          "States": {
            "check ntsm passing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__check_ntsm_internal_passing_lambda_function_arn__}",
                "Payload": {
                  "fastqRgidList": "{% $tags.fastqRgidList %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "ntsmInternalPassing": "{% $states.result.Payload.related %}"
              }
            }
          }
        }
      ],
      "Assign": {
        "tags": "{% /* https://try.jsonata.org/05K2l3beH */\n/* List to merge together */\n[\n    /* Start with the tags */\n    $tags,\n    /* Merge the results list together */\n    $merge($states.result)\n] \n/* Then merge these initial tags with states.result  */\n~> $merge\n/* Remove any keys with values */\n~> $sift(function($v, $k){$v != null}) %}"
      }
    },
    "Is new workflow manager deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Push DRAFT Event",
          "Condition": "{% /* ${__new_workflow_manager_is_deployed__} */ false %}",
          "Comment": "New workflow manager is deployed"
        }
      ],
      "Default": "Push DRAFT Event (legacy)"
    },
    "Push DRAFT Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $merge([\n  $draftDetail,\n  {\n    \"status\": \"${__draft_event_status__}\",\n    \"timestamp\": $states.context.State.EnteredTime,\n    \"payload\": (\n      $merge([\n        $draftPayload,\n        {\n          \"refId\": null,\n          \"data\": {\n            \"inputs\": $inputs,\n            \"engineParameters\": $engineParameters,\n            \"tags\": $tags\n          }\n        }\n      ])\n      /* Remove null inputs like refId */\n      ~> $sift(function($v, $k){$v != null})\n    )\n  }\n])\n %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "End": true
    },
    "Push DRAFT Event (legacy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $merge([\n  $draftDetail,\n  {\n    \"status\": \"${__draft_event_status__}\",\n    \"timestamp\": $states.context.State.EnteredTime,\n    \"payload\": (\n      $merge([\n        $draftPayload,\n        {\n          \"refId\": null,\n          \"data\": {\n            \"inputs\": $inputs,\n            \"engineParameters\": $engineParameters,\n            \"tags\": $tags\n          }\n        }\n      ])\n      /* Remove null inputs like refId */\n      ~> $sift(function($v, $k){$v != null})\n    )\n  }\n]) ~>\n/* Renamed libraries to linkedLibraries using the transform method */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Renamed workflowName and workflowVersion using the transform method */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] |\n %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
