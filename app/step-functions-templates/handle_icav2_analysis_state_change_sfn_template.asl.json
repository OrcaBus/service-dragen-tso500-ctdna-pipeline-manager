{
  "Comment": "A description of my state machine",
  "StartAt": "Convert ICAv2 WES event to WRSC Event",
  "States": {
    "Convert ICAv2 WES event to WRSC Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "If Succeeded Status"
    },
    "If Succeeded Status": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Check sample has succeeded"
        }
      ],
      "Default": "Put WRSC Event"
    },
    "Check sample has succeeded": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "",
        "Payload": "{% $states.input %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "If new status is succeeded"
    },
    "If new status is succeeded": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Compress and clean up",
          "Condition": ""
        }
      ],
      "Default": "Put WRSC Event"
    },
    "Compress and clean up": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Delete Cache URI",
          "States": {
            "Delete Cache URI": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "",
                "Payload": "{% $states.input %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Get output vcf files",
          "States": {
            "Get output vcf files": {
              "Type": "Task",
              "Arguments": {
                "Bucket": "MyData"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
              "Next": "Compress vcfs"
            },
            "Compress vcfs": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Tabix compress VCFs",
                "States": {
                  "Tabix compress VCFs": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Output": "{% $states.result.Payload %}",
                    "Arguments": {
                      "FunctionName": "",
                      "Payload": "{% $states.input %}"
                    },
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2,
                        "JitterStrategy": "FULL"
                      }
                    ],
                    "End": true
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Put WRSC Event"
    },
    "Put WRSC Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "Message": "Hello from Step Functions!",
              "TaskToken": "{% $states.context.Task.Token %}"
            },
            "DetailType": "MyDetailType",
            "EventBusName": "MyEventBusName",
            "Source": "MySource"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
